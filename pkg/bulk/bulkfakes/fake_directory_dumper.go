// Code generated by counterfeiter. DO NOT EDIT.
package bulkfakes

import (
	"context"
	"sync"

	"github.com/smartatransit/scrapedumper/pkg/bulk"
)

type FakeDirectoryDumper struct {
	DumpDirectoryStub        func(context.Context, string) error
	dumpDirectoryMutex       sync.RWMutex
	dumpDirectoryArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	dumpDirectoryReturns struct {
		result1 error
	}
	dumpDirectoryReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDirectoryDumper) DumpDirectory(arg1 context.Context, arg2 string) error {
	fake.dumpDirectoryMutex.Lock()
	ret, specificReturn := fake.dumpDirectoryReturnsOnCall[len(fake.dumpDirectoryArgsForCall)]
	fake.dumpDirectoryArgsForCall = append(fake.dumpDirectoryArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DumpDirectoryStub
	fakeReturns := fake.dumpDirectoryReturns
	fake.recordInvocation("DumpDirectory", []interface{}{arg1, arg2})
	fake.dumpDirectoryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDirectoryDumper) DumpDirectoryCallCount() int {
	fake.dumpDirectoryMutex.RLock()
	defer fake.dumpDirectoryMutex.RUnlock()
	return len(fake.dumpDirectoryArgsForCall)
}

func (fake *FakeDirectoryDumper) DumpDirectoryCalls(stub func(context.Context, string) error) {
	fake.dumpDirectoryMutex.Lock()
	defer fake.dumpDirectoryMutex.Unlock()
	fake.DumpDirectoryStub = stub
}

func (fake *FakeDirectoryDumper) DumpDirectoryArgsForCall(i int) (context.Context, string) {
	fake.dumpDirectoryMutex.RLock()
	defer fake.dumpDirectoryMutex.RUnlock()
	argsForCall := fake.dumpDirectoryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDirectoryDumper) DumpDirectoryReturns(result1 error) {
	fake.dumpDirectoryMutex.Lock()
	defer fake.dumpDirectoryMutex.Unlock()
	fake.DumpDirectoryStub = nil
	fake.dumpDirectoryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDirectoryDumper) DumpDirectoryReturnsOnCall(i int, result1 error) {
	fake.dumpDirectoryMutex.Lock()
	defer fake.dumpDirectoryMutex.Unlock()
	fake.DumpDirectoryStub = nil
	if fake.dumpDirectoryReturnsOnCall == nil {
		fake.dumpDirectoryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.dumpDirectoryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDirectoryDumper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dumpDirectoryMutex.RLock()
	defer fake.dumpDirectoryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDirectoryDumper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ bulk.DirectoryDumper = new(FakeDirectoryDumper)
